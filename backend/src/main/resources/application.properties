server.port=8081

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=none
# Antipattern? Consider use of @EntityGraph
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

spring.datasource.url=jdbc:mariadb://localhost:3306/spring_boot_angular_db
spring.datasource.username=root
spring.datasource.password=<PASSWORD>
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

security.oauth2.sso.login-path=/login

# ==========
# = Google =
# ==========
security.oauth2.client.client-id=<CLIENTID> 
security.oauth2.client.client-secret=<CLIENTSECRET>

security.oauth2.client.access-token-uri=https://www.googleapis.com/oauth2/v4/token
security.oauth2.client.user-authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
security.oauth2.client.client-authentication-scheme=form
security.oauth2.client.scope=https://www.googleapis.com/auth/userinfo.profile
#security.oauth2.client.scope=https://www.googleapis.com/auth/userinfo.email
#security.oauth2.client.scope=https://www.googleapis.com/auth/plus.me
#security.oauth2.client.scope=https://www.googleapis.com/auth/userinfo.email

security.oauth2.resource.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#security.oauth2.resource.prefer-token-info=true

# ==========
# = Github =
# ==========
#security.oauth2.client.client-id=<CLIENTID> 
#security.oauth2.client.client-secret=<CLIENTSECRET>
#
#security.oauth2.client.accessTokenUri=https://github.com/login/oauth/access_token
#security.oauth2.client.userAuthorizationUri=https://github.com/login/oauth/authorize
#security.oauth2.client.clientAuthenticationScheme=form
#security.oauth2.client.scope=openid email profile
#
#security.oauth2.resource.user-info-uri=https://api.github.com/user
#security.oauth2.resource.prefer-token-info=true
